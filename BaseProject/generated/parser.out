Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement ; programme
Rule 3     statement -> assignation
Rule 4     statement -> structure
Rule 5     statement -> PRINT expression
Rule 6     structure -> WHILE expression { programme }
Rule 7     structure -> IF expression { programme }
Rule 8     statement -> PRINTPIXEL ( expression , expression , expression , expression , expression )
Rule 9     expression -> expression ADD_OP expression
Rule 10    expression -> expression MUL_OP expression
Rule 11    expression -> expression EQUAL expression
Rule 12    expression -> NUMBER
Rule 13    expression -> IDENTIFIER
Rule 14    expression -> ( expression )
Rule 15    expression -> ADD_OP expression
Rule 16    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 8 14
)                    : 8 14
,                    : 8 8 8 8
;                    : 2
=                    : 16
ADD_OP               : 9 15
EQUAL                : 11
IDENTIFIER           : 13 16
IF                   : 7
MUL_OP               : 10
NUMBER               : 12
PRINT                : 5
PRINTPIXEL           : 8
WHILE                : 6
error                : 
{                    : 6 7
}                    : 6 7

Nonterminals, with rules where they appear

assignation          : 3
expression           : 5 6 7 8 8 8 8 8 9 9 10 10 11 11 14 15 16
programme            : 2 6 7 0
statement            : 1 2
structure            : 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (8) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 5
    IDENTIFIER      shift and go to state 2
    WHILE           shift and go to state 3
    IF              shift and go to state 9

    structure                      shift and go to state 1
    statement                      shift and go to state 6
    programme                      shift and go to state 8
    assignation                    shift and go to state 7

state 1

    (4) statement -> structure .

    ;               reduce using rule 4 (statement -> structure .)
    $end            reduce using rule 4 (statement -> structure .)
    }               reduce using rule 4 (statement -> structure .)


state 2

    (16) assignation -> IDENTIFIER . = expression

    =               shift and go to state 10


state 3

    (6) structure -> WHILE . expression { programme }
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 11

state 4

    (5) statement -> PRINT . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 16

state 5

    (8) statement -> PRINTPIXEL . ( expression , expression , expression , expression , expression )

    (               shift and go to state 17


state 6

    (1) programme -> statement .
    (2) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 18


state 7

    (3) statement -> assignation .

    ;               reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    }               reduce using rule 3 (statement -> assignation .)


state 8

    (0) S' -> programme .



state 9

    (7) structure -> IF . expression { programme }
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 19

state 10

    (16) assignation -> IDENTIFIER = . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 20

state 11

    (6) structure -> WHILE expression . { programme }
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    {               shift and go to state 22
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 12

    (15) expression -> ADD_OP . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 25

state 13

    (13) expression -> IDENTIFIER .

    )               reduce using rule 13 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 13 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 13 (expression -> IDENTIFIER .)
    EQUAL           reduce using rule 13 (expression -> IDENTIFIER .)
    {               reduce using rule 13 (expression -> IDENTIFIER .)
    ;               reduce using rule 13 (expression -> IDENTIFIER .)
    $end            reduce using rule 13 (expression -> IDENTIFIER .)
    }               reduce using rule 13 (expression -> IDENTIFIER .)
    ,               reduce using rule 13 (expression -> IDENTIFIER .)


state 14

    (14) expression -> ( . expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 26

state 15

    (12) expression -> NUMBER .

    )               reduce using rule 12 (expression -> NUMBER .)
    ADD_OP          reduce using rule 12 (expression -> NUMBER .)
    MUL_OP          reduce using rule 12 (expression -> NUMBER .)
    EQUAL           reduce using rule 12 (expression -> NUMBER .)
    {               reduce using rule 12 (expression -> NUMBER .)
    ;               reduce using rule 12 (expression -> NUMBER .)
    $end            reduce using rule 12 (expression -> NUMBER .)
    }               reduce using rule 12 (expression -> NUMBER .)
    ,               reduce using rule 12 (expression -> NUMBER .)


state 16

    (5) statement -> PRINT expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    ;               reduce using rule 5 (statement -> PRINT expression .)
    $end            reduce using rule 5 (statement -> PRINT expression .)
    }               reduce using rule 5 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 17

    (8) statement -> PRINTPIXEL ( . expression , expression , expression , expression , expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 27

state 18

    (2) programme -> statement ; . programme
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (8) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 5
    IDENTIFIER      shift and go to state 2
    WHILE           shift and go to state 3
    IF              shift and go to state 9

    structure                      shift and go to state 1
    statement                      shift and go to state 6
    programme                      shift and go to state 28
    assignation                    shift and go to state 7

state 19

    (7) structure -> IF expression . { programme }
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    {               shift and go to state 29
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 20

    (16) assignation -> IDENTIFIER = expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    ;               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 21

    (9) expression -> expression ADD_OP . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 30

state 22

    (6) structure -> WHILE expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (8) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 5
    IDENTIFIER      shift and go to state 2
    WHILE           shift and go to state 3
    IF              shift and go to state 9

    structure                      shift and go to state 1
    programme                      shift and go to state 31
    assignation                    shift and go to state 7
    statement                      shift and go to state 6

state 23

    (10) expression -> expression MUL_OP . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 32

state 24

    (11) expression -> expression EQUAL . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 33

state 25

    (15) expression -> ADD_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    )               reduce using rule 15 (expression -> ADD_OP expression .)
    ADD_OP          reduce using rule 15 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 15 (expression -> ADD_OP expression .)
    EQUAL           reduce using rule 15 (expression -> ADD_OP expression .)
    {               reduce using rule 15 (expression -> ADD_OP expression .)
    ;               reduce using rule 15 (expression -> ADD_OP expression .)
    $end            reduce using rule 15 (expression -> ADD_OP expression .)
    }               reduce using rule 15 (expression -> ADD_OP expression .)
    ,               reduce using rule 15 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 21 ]
  ! MUL_OP          [ shift and go to state 23 ]
  ! EQUAL           [ shift and go to state 24 ]


state 26

    (14) expression -> ( expression . )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    )               shift and go to state 34
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 27

    (8) statement -> PRINTPIXEL ( expression . , expression , expression , expression , expression )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    ,               shift and go to state 35
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 28

    (2) programme -> statement ; programme .

    $end            reduce using rule 2 (programme -> statement ; programme .)
    }               reduce using rule 2 (programme -> statement ; programme .)


state 29

    (7) structure -> IF expression { . programme }
    (1) programme -> . statement
    (2) programme -> . statement ; programme
    (3) statement -> . assignation
    (4) statement -> . structure
    (5) statement -> . PRINT expression
    (8) statement -> . PRINTPIXEL ( expression , expression , expression , expression , expression )
    (16) assignation -> . IDENTIFIER = expression
    (6) structure -> . WHILE expression { programme }
    (7) structure -> . IF expression { programme }

    PRINT           shift and go to state 4
    PRINTPIXEL      shift and go to state 5
    IDENTIFIER      shift and go to state 2
    WHILE           shift and go to state 3
    IF              shift and go to state 9

    structure                      shift and go to state 1
    programme                      shift and go to state 36
    assignation                    shift and go to state 7
    statement                      shift and go to state 6

state 30

    (9) expression -> expression ADD_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    )               reduce using rule 9 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 9 (expression -> expression ADD_OP expression .)
    EQUAL           reduce using rule 9 (expression -> expression ADD_OP expression .)
    {               reduce using rule 9 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 9 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 9 (expression -> expression ADD_OP expression .)
    }               reduce using rule 9 (expression -> expression ADD_OP expression .)
    ,               reduce using rule 9 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 23

  ! MUL_OP          [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 21 ]
  ! EQUAL           [ shift and go to state 24 ]


state 31

    (6) structure -> WHILE expression { programme . }

    }               shift and go to state 37


state 32

    (10) expression -> expression MUL_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    )               reduce using rule 10 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 10 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 10 (expression -> expression MUL_OP expression .)
    EQUAL           reduce using rule 10 (expression -> expression MUL_OP expression .)
    {               reduce using rule 10 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 10 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 10 (expression -> expression MUL_OP expression .)
    }               reduce using rule 10 (expression -> expression MUL_OP expression .)
    ,               reduce using rule 10 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 21 ]
  ! MUL_OP          [ shift and go to state 23 ]
  ! EQUAL           [ shift and go to state 24 ]


state 33

    (11) expression -> expression EQUAL expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    )               reduce using rule 11 (expression -> expression EQUAL expression .)
    {               reduce using rule 11 (expression -> expression EQUAL expression .)
    ;               reduce using rule 11 (expression -> expression EQUAL expression .)
    $end            reduce using rule 11 (expression -> expression EQUAL expression .)
    }               reduce using rule 11 (expression -> expression EQUAL expression .)
    ,               reduce using rule 11 (expression -> expression EQUAL expression .)
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24

  ! ADD_OP          [ reduce using rule 11 (expression -> expression EQUAL expression .) ]
  ! MUL_OP          [ reduce using rule 11 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 11 (expression -> expression EQUAL expression .) ]


state 34

    (14) expression -> ( expression ) .

    )               reduce using rule 14 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 14 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 14 (expression -> ( expression ) .)
    EQUAL           reduce using rule 14 (expression -> ( expression ) .)
    {               reduce using rule 14 (expression -> ( expression ) .)
    ;               reduce using rule 14 (expression -> ( expression ) .)
    $end            reduce using rule 14 (expression -> ( expression ) .)
    }               reduce using rule 14 (expression -> ( expression ) .)
    ,               reduce using rule 14 (expression -> ( expression ) .)


state 35

    (8) statement -> PRINTPIXEL ( expression , . expression , expression , expression , expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 38

state 36

    (7) structure -> IF expression { programme . }

    }               shift and go to state 39


state 37

    (6) structure -> WHILE expression { programme } .

    ;               reduce using rule 6 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 6 (structure -> WHILE expression { programme } .)
    }               reduce using rule 6 (structure -> WHILE expression { programme } .)


state 38

    (8) statement -> PRINTPIXEL ( expression , expression . , expression , expression , expression )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    ,               shift and go to state 40
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 39

    (7) structure -> IF expression { programme } .

    ;               reduce using rule 7 (structure -> IF expression { programme } .)
    $end            reduce using rule 7 (structure -> IF expression { programme } .)
    }               reduce using rule 7 (structure -> IF expression { programme } .)


state 40

    (8) statement -> PRINTPIXEL ( expression , expression , . expression , expression , expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 41

state 41

    (8) statement -> PRINTPIXEL ( expression , expression , expression . , expression , expression )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    ,               shift and go to state 42
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 42

    (8) statement -> PRINTPIXEL ( expression , expression , expression , . expression , expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 43

state 43

    (8) statement -> PRINTPIXEL ( expression , expression , expression , expression . , expression )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    ,               shift and go to state 44
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 44

    (8) statement -> PRINTPIXEL ( expression , expression , expression , expression , . expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . expression EQUAL expression
    (12) expression -> . NUMBER
    (13) expression -> . IDENTIFIER
    (14) expression -> . ( expression )
    (15) expression -> . ADD_OP expression

    NUMBER          shift and go to state 15
    IDENTIFIER      shift and go to state 13
    (               shift and go to state 14
    ADD_OP          shift and go to state 12

    expression                     shift and go to state 45

state 45

    (8) statement -> PRINTPIXEL ( expression , expression , expression , expression , expression . )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (11) expression -> expression . EQUAL expression

    )               shift and go to state 46
    ADD_OP          shift and go to state 21
    MUL_OP          shift and go to state 23
    EQUAL           shift and go to state 24


state 46

    (8) statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 8 (statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .)
    $end            reduce using rule 8 (statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .)
    }               reduce using rule 8 (statement -> PRINTPIXEL ( expression , expression , expression , expression , expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 33 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 33 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 33 resolved as shift
