
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'ED13F83B1E31F3DBA3AC00E24DEAC555'
    
_lr_action_items = {')':([13,15,22,23,32,36,38,39,40,41,42,43,49,60,],[-16,-17,36,-19,-20,-18,-14,-11,-13,-12,-10,-15,52,61,]),'IF':([0,18,24,35,54,],[1,1,1,1,1,]),'{':([13,14,15,21,23,36,38,39,40,41,42,43,52,],[-16,24,-17,35,-19,-18,-14,-11,-13,-12,-10,-15,54,]),'IDENTIFIER':([0,1,7,10,11,12,16,17,18,20,24,25,26,27,28,29,30,35,44,45,51,54,55,59,],[5,15,15,15,15,15,15,15,5,15,5,15,15,15,15,15,15,5,15,5,15,5,15,15,]),'EQUAL':([13,14,15,19,21,22,23,31,32,34,36,38,39,40,41,42,43,48,53,57,60,],[-16,28,-17,28,28,28,28,28,28,28,-18,-14,28,-13,28,28,-15,28,28,28,28,]),'>':([13,14,15,19,21,22,23,31,32,34,36,38,39,40,41,42,43,48,53,57,60,],[-16,30,-17,30,30,30,30,30,30,30,-18,30,30,30,30,30,30,30,30,30,30,]),'(':([1,3,7,8,10,11,12,16,17,20,25,26,27,28,29,30,44,51,55,59,],[11,16,11,20,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),';':([4,6,9,13,15,19,23,32,36,38,39,40,41,42,43,47,50,58,61,],[-4,18,-3,-16,-17,-5,-19,-20,-18,-14,-11,-13,-12,-10,-15,-8,-7,-6,-9,]),'ADD_OP':([1,7,10,11,12,13,14,15,16,17,19,20,21,22,23,25,26,27,28,29,30,31,32,34,36,38,39,40,41,42,43,44,48,51,53,55,57,59,60,],[12,12,12,12,12,-16,29,-17,12,12,29,12,29,29,-19,12,12,12,12,12,12,29,29,29,-18,-14,-11,-13,-12,-10,-15,12,29,12,29,12,29,12,29,]),'NUMBER':([1,7,10,11,12,16,17,20,25,26,27,28,29,30,44,51,55,59,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'}':([4,6,9,13,15,19,23,32,33,36,37,38,39,40,41,42,43,46,47,50,56,58,61,],[-4,-1,-3,-16,-17,-5,-19,-20,-2,-18,47,-14,-11,-13,-12,-10,-15,50,-8,-7,58,-6,-9,]),'NOTEQUAL':([13,14,15,19,21,22,23,31,32,34,36,38,39,40,41,42,43,48,53,57,60,],[-16,27,-17,27,27,27,27,27,27,27,-18,-14,27,27,27,27,-15,27,27,27,27,]),'WHILE':([0,18,24,35,54,],[10,10,10,10,10,]),'PRINT':([0,18,24,35,54,],[7,7,7,7,7,]),'=':([5,],[17,]),',':([13,15,23,31,34,36,38,39,40,41,42,43,48,53,57,],[-16,-17,-19,44,45,-18,-14,-11,-13,-12,-10,-15,51,55,59,]),'PRINTPIXEL':([0,18,24,35,54,],[3,3,3,3,3,]),'MUL_OP':([13,14,15,19,21,22,23,31,32,34,36,38,39,40,41,42,43,48,53,57,60,],[-16,26,-17,26,26,26,-19,26,26,26,-18,-14,-11,-13,-12,26,-15,26,26,26,26,]),'FOR':([0,18,24,35,54,],[8,8,8,8,8,]),'$end':([2,4,6,9,13,15,19,23,32,33,36,38,39,40,41,42,43,47,50,58,61,],[0,-4,-1,-3,-16,-17,-5,-19,-20,-2,-18,-14,-11,-13,-12,-10,-15,-8,-7,-6,-9,]),'<':([13,14,15,19,21,22,23,31,32,34,36,38,39,40,41,42,43,48,53,57,60,],[-16,25,-17,25,25,25,25,25,25,25,-18,25,25,25,25,25,-15,25,25,25,25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,18,24,35,54,],[6,6,6,6,6,]),'expression':([1,7,10,11,12,16,17,20,25,26,27,28,29,30,44,51,55,59,],[14,19,21,22,23,31,32,34,38,39,40,41,42,43,48,53,57,60,]),'assignation':([0,18,24,35,45,54,],[9,9,9,9,49,9,]),'programme':([0,18,24,35,54,],[2,33,37,46,56,]),'structure':([0,18,24,35,54,],[4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserPaint.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserPaint.py',14),
  ('statement -> assignation','statement',1,'p_statement','parserPaint.py',19),
  ('statement -> structure','statement',1,'p_statement','parserPaint.py',20),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parserPaint.py',25),
  ('structure -> FOR ( expression , assignation ) { programme }','structure',9,'p_structure_for','parserPaint.py',30),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parserPaint.py',37),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserPaint.py',42),
  ('statement -> PRINTPIXEL ( expression , expression , expression , expression , expression )','statement',12,'p_printPixel','parserPaint.py',47),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserPaint.py',52),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserPaint.py',53),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_equal','parserPaint.py',58),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_notequal','parserPaint.py',63),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserPaint.py',68),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserPaint.py',73),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserPaint.py',78),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserPaint.py',79),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserPaint.py',84),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parserPaint.py',89),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserPaint.py',94),
]
